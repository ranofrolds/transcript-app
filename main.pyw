import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import sounddevice as sd
import soundfile as sf
import numpy as np
import requests
import tempfile
import os
from datetime import datetime
import pyperclip
import config
import json
import base64

class TranscriptApp:
    def __init__(self, root):
        self.root = root
        self.root.title(config.WINDOW_TITLE)
        self.root.geometry(config.WINDOW_SIZE)
        self.root.resizable(config.WINDOW_RESIZABLE, config.WINDOW_RESIZABLE)
        
        # Arquivo para salvar configura√ß√µes
        self.config_file = "transcritor_config.json"
        
        # Vari√°veis de controle
        self.recording = False
        self.audio_data = []
        self.sample_rate = config.SAMPLE_RATE
        self.temp_file = None
        
        # API Key da OpenAI
        self.api_key = ""
        
        self.setup_ui()
        self.load_api_key()
    
    def setup_ui(self):
        # Configurar menu
        self.setup_menu()
        
        # Configurar estilo
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # Bot√£o Gravar/Parar
        self.record_button = ttk.Button(
            main_frame, 
            text=config.BUTTON_RECORD, 
            command=self.toggle_recording,
            style="Record.TButton"
        )
        self.record_button.grid(row=0, column=0, pady=(0, 20), sticky=(tk.W, tk.E))
        
        # Configurar estilo do bot√£o
        style.configure("Record.TButton", font=config.BUTTON_FONT)
        style.configure("Stop.TButton", font=config.BUTTON_FONT)
        
        # Caixa de texto para resultado
        text_frame = ttk.LabelFrame(main_frame, text="Texto Transcrito", padding="10")
        text_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        text_frame.columnconfigure(0, weight=1)
        text_frame.rowconfigure(0, weight=1)
        
        self.text_area = scrolledtext.ScrolledText(
            text_frame,
            wrap=tk.WORD,
            width=config.TEXT_AREA_WIDTH,
            height=config.TEXT_AREA_HEIGHT,
            font=config.TEXT_FONT
        )
        self.text_area.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Bot√£o Copiar
        self.copy_button = ttk.Button(
            main_frame,
            text=config.BUTTON_COPY,
            command=self.copy_text,
            state="disabled"
        )
        self.copy_button.grid(row=2, column=0, pady=(0, 10), sticky=(tk.W, tk.E))
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set(config.STATUS_READY)
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.grid(row=3, column=0, sticky=(tk.W, tk.E))
    
    def setup_menu(self):
        """Configura o menu da aplica√ß√£o"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Menu Configura√ß√µes
        config_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Configura√ß√µes", menu=config_menu)
        config_menu.add_command(label="Alterar API Key", command=self.change_api_key)
        config_menu.add_command(label="Remover API Key", command=self.remove_api_key)
        config_menu.add_separator()
        config_menu.add_command(label="Sobre", command=self.show_about)
        
        # Menu Ajuda
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Ajuda", menu=help_menu)
        help_menu.add_command(label="Como Usar", command=self.show_help)
        help_menu.add_command(label="Obter API Key", command=self.open_api_key_url)
    
    def load_api_key(self):
        """Carrega a API key salva ou solicita uma nova"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config_data = json.load(f)
                    # Descriptografar API key (codifica√ß√£o simples)
                    encoded_key = config_data.get('api_key', '')
                    if encoded_key:
                        self.api_key = base64.b64decode(encoded_key.encode()).decode()
                        self.status_var.set("API Key carregada - Pronto para gravar")
                        return
        except Exception:
            pass
        
        # Se n√£o conseguiu carregar, solicita nova API key
        self.ask_for_api_key()
    
    def save_api_key(self):
        """Salva a API key de forma segura"""
        try:
            # Criptografar API key (codifica√ß√£o simples)
            encoded_key = base64.b64encode(self.api_key.encode()).decode()
            config_data = {
                'api_key': encoded_key,
                'app_version': '1.0.0'
            }
            
            with open(self.config_file, 'w') as f:
                json.dump(config_data, f)
            
            return True
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar configura√ß√µes: {str(e)}")
            return False
    
    def change_api_key(self):
        """Permite alterar a API key"""
        current_key = "***" + self.api_key[-8:] if len(self.api_key) > 8 else "***"
        
        new_key = tk.simpledialog.askstring(
            "Alterar API Key",
            f"API Key atual: {current_key}\n\nDigite a nova API key:",
            show='*'
        )
        
        if new_key and new_key.strip():
            self.api_key = new_key.strip()
            if self.save_api_key():
                messagebox.showinfo("Sucesso", "API Key alterada com sucesso!")
                self.status_var.set("API Key atualizada - Pronto para gravar")
    
    def remove_api_key(self):
        """Remove a API key salva"""
        if messagebox.askyesno("Confirmar", "Deseja remover a API Key salva?\n\nVoc√™ precisar√° digitar novamente na pr√≥xima execu√ß√£o."):
            try:
                if os.path.exists(self.config_file):
                    os.remove(self.config_file)
                self.api_key = ""
                messagebox.showinfo("Sucesso", "API Key removida com sucesso!")
                self.status_var.set("API Key removida - Configure novamente")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao remover configura√ß√µes: {str(e)}")
    
    def show_about(self):
        """Mostra informa√ß√µes sobre o aplicativo"""
        about_text = """Transcritor de √Åudio v1.0.0

Aplica√ß√£o para transcri√ß√£o de √°udio usando OpenAI Whisper API.

Funcionalidades:
‚Ä¢ Grava√ß√£o via microfone
‚Ä¢ Transcri√ß√£o autom√°tica
‚Ä¢ Copiar texto
‚Ä¢ Interface minimalista

Tecnologias:
‚Ä¢ Python + Tkinter
‚Ä¢ OpenAI Whisper API
‚Ä¢ sounddevice + numpy"""
        
        messagebox.showinfo("Sobre", about_text)
    
    def show_help(self):
        """Mostra ajuda de uso"""
        help_text = """Como Usar:

1. Configure sua API Key (menu Configura√ß√µes)
2. Clique "üé§ Gravar" para iniciar
3. Fale no microfone
4. Clique "‚èπÔ∏è Parar" para finalizar
5. Aguarde a transcri√ß√£o
6. Use "üìã Copiar Texto" para copiar

Dicas:
‚Ä¢ Fale claramente e pr√≥ximo ao microfone
‚Ä¢ Evite ru√≠dos de fundo
‚Ä¢ A transcri√ß√£o funciona melhor com portugu√™s e ingl√™s"""
        
        messagebox.showinfo("Como Usar", help_text)
    
    def open_api_key_url(self):
        """Abre URL para obter API Key"""
        import webbrowser
        webbrowser.open("https://platform.openai.com/api-keys")
        messagebox.showinfo("API Key", "P√°gina aberta no navegador!\n\n1. Fa√ßa login na OpenAI\n2. Clique 'Create new secret key'\n3. Copie a chave gerada\n4. Cole no aplicativo")
    
    def ask_for_api_key(self):
        """Solicita a API key da OpenAI ao usu√°rio"""
        api_key = tk.simpledialog.askstring(
            config.DIALOG_API_KEY_TITLE,
            config.DIALOG_API_KEY_MESSAGE + "\n\n(A chave ser√° salva para pr√≥ximas execu√ß√µes)",
            show='*'
        )
        
        if api_key:
            self.api_key = api_key.strip()
            if self.save_api_key():
                self.status_var.set("API Key configurada - Pronto para gravar")
            else:
                self.status_var.set("API Key configurada (n√£o salva) - Pronto para gravar")
        else:
            messagebox.showerror("Erro", config.ERROR_API_KEY_REQUIRED)
            self.root.quit()
    
    def toggle_recording(self):
        """Alterna entre gravar e parar grava√ß√£o"""
        if not self.recording:
            self.start_recording()
        else:
            self.stop_recording()
    
    def start_recording(self):
        """Inicia a grava√ß√£o de √°udio"""
        try:
            self.recording = True
            self.audio_data = []
            
            # Atualizar UI
            self.record_button.config(text=config.BUTTON_STOP, style="Stop.TButton")
            self.status_var.set(config.STATUS_RECORDING)
            self.text_area.delete(1.0, tk.END)
            self.copy_button.config(state="disabled")
            
            # Iniciar grava√ß√£o em thread separada
            self.recording_thread = threading.Thread(target=self._record_audio)
            self.recording_thread.start()
            
        except Exception as e:
            messagebox.showerror("Erro", config.ERROR_RECORDING_START.format(str(e)))
            self.recording = False
    
    def _record_audio(self):
        """Fun√ß√£o de grava√ß√£o de √°udio executada em thread separada"""
        try:
            def audio_callback(indata, frames, time, status):
                if self.recording:
                    self.audio_data.append(indata.copy())
            
            with sd.InputStream(callback=audio_callback, 
                              samplerate=self.sample_rate, 
                              channels=config.CHANNELS, 
                              dtype=config.AUDIO_FORMAT):
                while self.recording:
                    sd.sleep(100)  # Pequena pausa para n√£o sobrecarregar
                    
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("Erro", config.ERROR_RECORDING_AUDIO.format(str(e))))
    
    def stop_recording(self):
        """Para a grava√ß√£o e processa o √°udio"""
        self.recording = False
        
        # Atualizar UI
        self.record_button.config(text=config.BUTTON_RECORD, style="Record.TButton")
        self.status_var.set(config.STATUS_PROCESSING)
        
        # Processar √°udio em thread separada
        processing_thread = threading.Thread(target=self._process_audio)
        processing_thread.start()
    
    def _process_audio(self):
        """Processa o √°udio gravado e envia para transcri√ß√£o"""
        try:
            if not self.audio_data:
                self.root.after(0, lambda: self.status_var.set(config.STATUS_NO_AUDIO))
                return
            
            # Concatenar dados de √°udio
            audio_array = np.concatenate(self.audio_data, axis=0)
            
            # Salvar arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(delete=False, suffix=config.TEMP_FILE_SUFFIX) as tmp_file:
                self.temp_file = tmp_file.name
                sf.write(self.temp_file, audio_array, self.sample_rate)
            
            # Enviar para transcri√ß√£o
            self.root.after(0, lambda: self.status_var.set(config.STATUS_TRANSCRIBING))
            self._transcribe_audio()
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("Erro", config.ERROR_PROCESSING_AUDIO.format(str(e))))
            self.root.after(0, lambda: self.status_var.set(config.STATUS_ERROR_PROCESSING))
    
    def _transcribe_audio(self):
        """Envia √°udio para API da OpenAI e obt√©m transcri√ß√£o"""
        try:
            if not self.temp_file or not os.path.exists(self.temp_file):
                raise Exception(config.ERROR_NO_AUDIO_FILE)
            
            # Preparar requisi√ß√£o para API
            url = config.API_URL
            headers = {
                "Authorization": f"Bearer {self.api_key}"
            }
            
            with open(self.temp_file, 'rb') as audio_file:
                files = {
                    'file': ('audio.wav', audio_file, 'audio/wav'),
                    'model': (None, config.MODEL),
                    'language': (None, config.LANGUAGE)
                }
                
                response = requests.post(url, headers=headers, files=files, timeout=config.TIMEOUT)
            
            # Limpar arquivo tempor√°rio
            if config.DELETE_TEMP_FILES:
                try:
                    os.unlink(self.temp_file)
                except:
                    pass
            
            if response.status_code == 200:
                result = response.json()
                transcript = result.get('text', 'Nenhum texto detectado')
                
                # Atualizar UI no thread principal
                self.root.after(0, lambda: self._display_transcript(transcript))
            else:
                error_msg = f"Erro na API: {response.status_code}"
                try:
                    error_detail = response.json().get('error', {}).get('message', '')
                    if error_detail:
                        error_msg += f" - {error_detail}"
                except:
                    pass
                
                self.root.after(0, lambda: messagebox.showerror("Erro de API", error_msg))
                self.root.after(0, lambda: self.status_var.set(config.STATUS_ERROR_TRANSCRIPTION))
                
        except requests.exceptions.Timeout:
            self.root.after(0, lambda: messagebox.showerror("Erro", "Timeout na requisi√ß√£o"))
            self.root.after(0, lambda: self.status_var.set(config.STATUS_TIMEOUT))
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("Erro", config.ERROR_TRANSCRIPTION.format(str(e))))
            self.root.after(0, lambda: self.status_var.set(config.STATUS_ERROR_TRANSCRIPTION))
    
    def _display_transcript(self, transcript):
        """Exibe o texto transcrito na interface"""
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(1.0, transcript)
        self.copy_button.config(state="normal")
        self.status_var.set(config.STATUS_COMPLETED.format(len(transcript)))
    
    def copy_text(self):
        """Copia o texto para a √°rea de transfer√™ncia"""
        text = self.text_area.get(1.0, tk.END).strip()
        if text:
            try:
                pyperclip.copy(text)
                self.status_var.set(config.STATUS_COPIED)
            except Exception as e:
                messagebox.showerror("Erro", config.ERROR_COPY.format(str(e)))
        else:
            messagebox.showwarning("Aviso", config.WARNING_NO_TEXT_TO_COPY)

def main():
    # Verificar depend√™ncias
    try:
        import tkinter.simpledialog
    except ImportError:
        print(config.ERROR_NO_PYTHON)
        return
    
    # Criar e executar aplica√ß√£o
    root = tk.Tk()
    app = TranscriptApp(root)
    
    # Configurar √≠cone da janela (opcional)
    try:
        root.iconbitmap(default='icon.ico')  # Se tiver um √≠cone
    except:
        pass
    
    root.mainloop()

if __name__ == "__main__":
    main() 